:mod:`finpy.alphavantage`
=========================

.. py:module:: finpy.alphavantage

.. autoapi-nested-parse::

   Alphavantage financial data client and utilities.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   finpy.alphavantage.Interval
   finpy.alphavantage.OutputSize
   finpy.alphavantage.DataType
   finpy.alphavantage.Function
   finpy.alphavantage.StockClient



.. data:: API_URL
   :annotation: = https://www.alphavantage.co/query

   

.. py:class:: Interval

   Bases: :class:`enum.Enum`

   Possible interval values for intraday requests.

   .. attribute:: M1
      :annotation: = 1min

      

   .. attribute:: M5
      :annotation: = 5min

      

   .. attribute:: M15
      :annotation: = 15min

      

   .. attribute:: M30
      :annotation: = 30min

      

   .. attribute:: H1
      :annotation: = 60min

      

   .. method:: __str__(self)


      Return str(self).



.. py:class:: OutputSize

   Bases: :class:`enum.Enum`

   Output sizes of api responses. Use'full' for the full
   history or compact for the last 100 data points.

   .. attribute:: FULL
      :annotation: = full

      

   .. attribute:: COMPACT
      :annotation: = compact

      

   .. method:: __str__(self)


      Return str(self).



.. py:class:: DataType

   Bases: :class:`enum.Enum`

   Available Formats for data returned from the api.
   Either 'csv' or 'json'.

   .. attribute:: CSV
      :annotation: = csv

      

   .. attribute:: JSON
      :annotation: = json

      

   .. method:: __str__(self)


      Return str(self).



.. py:class:: Function

   Bases: :class:`enum.Enum`

   The API function to use when making a request. Specifies
   the granularity of the returned price data. 'GLOBAL_QUOTE'
   provides the current price data only. 'SYMBOL_SEARCH' allows
   searching for valid symbols.

   .. attribute:: QUOTE
      :annotation: = GLOBAL_QUOTE

      

   .. attribute:: SEARCH
      :annotation: = SYMBOL_SEARCH

      

   .. attribute:: INTRADAY
      :annotation: = TIME_SERIES_INTRADAY

      

   .. attribute:: DAILY
      :annotation: = TIME_SERIES_DAILY

      

   .. attribute:: WEEKLY
      :annotation: = TIME_SERIES_WEEKLY

      

   .. attribute:: MONTHLY
      :annotation: = TIME_SERIES_MONTHLY

      

   .. attribute:: DAILY_ADJUSTED
      :annotation: = TIME_SERIES_DAILY_ADJUSTED

      

   .. attribute:: WEEKLY_ADJUSTED
      :annotation: = TIME_SERIES_WEEKLY_ADJUSTED

      

   .. attribute:: MONTHLY_ADJUSTED
      :annotation: = TIME_SERIES_MONTHLY_ADJUSTED

      

   .. method:: __str__(self)


      Return str(self).



.. py:class:: StockClient(api_key)

   A client for the Stock Time Series functions provided by
   the AlphaVantage REST API.

   :param api_key: An alpha vantage api key.
   :type api_key: str

   .. method:: get_intraday_data(self, symbol, interval=Interval.H1, output_size=OutputSize.COMPACT, data_type=DataType.JSON)


      Requests intraday stock price time series data.

      :param symbol: The symbol of the stock to retrieve data for.
      :type symbol: str
      :param interval: The granularity of the returned time series data.
      :type interval: str
      :param output_size: The size of the output data. Either full for
                          the entire history of the symbol or compact for the last 100
                          entries.
      :type output_size: str
      :param data_type: The format of the returned price data. either csv
      :type data_type: str
      :param or json.:

      :returns: The body of the response from the api.
      :rtype: str


   .. method:: get_daily_data(self, symbol, output_size=OutputSize.COMPACT, data_type=DataType.JSON)


      Requests daily stock price time series data.

      :param symbol: The symbol of the stock to retrieve data for.
      :type symbol: str
      :param output_size: The size of the output data. Either full for
                          the entire history of the symbol or compact for the last 100
                          entries.
      :type output_size: str
      :param data_type: The format of the returned price data. either csv
                        or json.
      :type data_type: str

      :returns: The body of the response from the api.
      :rtype: str


   .. method:: get_daily_adjusted_data(self, symbol, output_size=OutputSize.COMPACT, data_type=DataType.JSON)


      Requests daily adjusted stock price time series data.

      :param symbol: The symbol of the stock to retrieve data for.
      :type symbol: str
      :param output_size: The size of the output data. Either full for
                          the entire history of the symbol or compact for the last 100
                          entries.
      :type output_size: str
      :param data_type: The format of the returned price data. either csv
                        or json.
      :type data_type: str

      :returns: The body of the response from the api.
      :rtype: str


   .. method:: _handle_request(self, params, output_size, data_type)




